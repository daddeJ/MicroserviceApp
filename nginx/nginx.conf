worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # Upstream services with health check parameters
    upstream userservice {
        server userservice:8080 max_fails=3 fail_timeout=30s;
    }
    
    upstream authservice {
        server authservice:8080 max_fails=3 fail_timeout=30s;
    }
    
    upstream loggerservice {
        server loggerservice:8080 max_fails=3 fail_timeout=30s;
    }

    # Proxy timeouts for health checks
    proxy_connect_timeout 2s;
    proxy_read_timeout 5s;
    proxy_send_timeout 5s;

    # Redirect all HTTP requests to HTTPS
    server {
        listen 80;
        server_name localhost;
        access_log off;
        
        # Health check endpoint for Docker (HTTP)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name localhost;
    
        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
    
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
    
        root /usr/share/nginx/html;
        index index.html;
    
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    
        # Handle OPTIONS requests
        if ($request_method = OPTIONS) {
            return 204;
        }
    
        # Frontend SPA
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Nginx process health check
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"nginx"}';
            add_header Content-Type application/json;
        }
        
        # Combined health check endpoint - now actually checks services
        location /api/health {
            access_log off;
            
            # Use auth service as primary health indicator
            proxy_pass http://authservice/health;
            proxy_intercept_errors on;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # If auth service is down, return degraded status
            error_page 502 503 504 =200 @health_degraded;
        }
        
        location @health_degraded {
            return 200 '{"status":"degraded","message":"One or more services are unavailable","services":["auth","user","logger"]}';
            add_header Content-Type application/json;
        }

        # Individual service health checks with proper error handling
        location /api/auth/health {
            proxy_pass http://authservice/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @auth_unavailable;
        }
        
        location /api/user/health {
            proxy_pass http://userservice/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @user_unavailable;
        }
        
        location /api/logger/health {
            proxy_pass http://loggerservice/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;
            error_page 502 503 504 =503 @logger_unavailable;
        }

        # Error handlers for unavailable services
        location @auth_unavailable {
            return 503 '{"status":"unavailable","service":"auth"}';
            add_header Content-Type application/json;
        }
        
        location @user_unavailable {
            return 503 '{"status":"unavailable","service":"user"}';
            add_header Content-Type application/json;
        }
        
        location @logger_unavailable {
            return 503 '{"status":"unavailable","service":"logger"}';
            add_header Content-Type application/json;
        }
    
        # API endpoints with improved configuration
        location /api/user/ {
            proxy_pass http://userservice/api/user/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }
        
        location /api/auth/ {
            proxy_pass http://authservice/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }
        
        location /api/logger/ {
            proxy_pass http://loggerservice/api/logger/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }
        
        # Swagger documentation endpoints
        location /swagger/user/ {
            proxy_pass http://userservice/swagger/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /swagger/auth/ {
            proxy_pass http://authservice/swagger/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /swagger/logger/ {
            proxy_pass http://loggerservice/swagger/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: ${MSSQL_SA_PASSWORD:-StrongP@ssw0rd123!}
      ACCEPT_EULA: ${MSSQL_ACCEPT_EULA:-Y}
      MSSQL_PID: ${MSSQL_PID:-Developer}
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD_LOCAL:-StrongP@ssw0rd123!} -Q 'SELECT 1' -C || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    volumes:
      - mssql_data:/var/opt/mssql
      - ./scripts/sql:/tmp/sql:ro  # Mount to a different directory
    networks:
      - microservice_network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - microservice_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - microservice_network

  authservice:
    build:
      context: ./backend/src
      dockerfile: AuthService/Dockerfile
    container_name: authservice
    ports:
      - "5002:8080"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mssql:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${DOTNET_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: "http://+:8080"
      REDIS_CONNECTION: ${REDIS_CONNECTION:-redis:6379}
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      JwtSettings__PrivateKey: ${JWT_PRIVATE_KEY}
      JwtSettings__PublicKey: ${JWT_PUBLIC_KEY}
      JwtSettings__Audience: ${AUDIENCE}
      JwtSettings__Issuer: ${ISSUER}
      JwtSettings__ExpirationMinutes: ${EXPIRATION:-60}
      ConnectionStrings__AuthServiceConnection: ${AUTH_SERVICE_DBCONNECTION_LOCAL}
    volumes:
      - ./backend/keys:/app/keys:ro  # Mount JWT keys
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8080' 2>/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    restart: unless-stopped
    networks:
      - microservice_network

  userservice:
    build:
      context: ./backend/src
      dockerfile: UserService/Dockerfile
    container_name: userservice
    ports:
      - "5001:8080"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mssql:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${DOTNET_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: "http://+:8080"
      REDIS_CONNECTION: ${REDIS_CONNECTION:-redis:6379}
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      JwtSettings__PrivateKey: ${JWT_PRIVATE_KEY}
      JwtSettings__PublicKey: ${JWT_PUBLIC_KEY}
      ConnectionStrings__UserServiceConnection: ${USER_SERVICE_DBCONNECTION_LOCAL}
    volumes:
      - ./backend/keys:/app/keys:ro  # Mount JWT keys
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8080' 2>/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    restart: unless-stopped
    networks:
      - microservice_network

  loggerservice:
    build:
      context: ./backend/src
      dockerfile: LoggerService/Dockerfile
    container_name: loggerservice
    ports:
      - "5003:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mssql:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${DOTNET_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: "http://+:8080"
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-guest}
      ConnectionStrings__LoggerServiceConnection: ${LOG_SERVICE_DBCONNECTION_LOCAL}
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8080' 2>/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    restart: unless-stopped
    networks:
      - microservice_network
  
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      authservice:
        condition: service_healthy
      userservice:
        condition: service_healthy
      loggerservice:
        condition: service_healthy
    volumes:
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/health || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - microservice_network

volumes:
  mssql_data:

networks:
  microservice_network:
    driver: bridge
@page "/login"
@using BlazorWasm.Constants
@using BlazorWasm.Services
@using BlazorWasm.Models
@inject IAuthApiClient AuthApiClient
@inject IUserApiClient UserApiClient
@inject ITokenService TokenService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

<div style="max-width: 400px; margin: 2rem auto; padding: 1rem; border: 1px solid #ccc; border-radius: 8px;">
    <div style="margin-bottom: 1rem;">
        <label for="username">Username</label><br />
        <input id="username" @bind="_loginRequest.Username" placeholder="Enter username" style="width: 100%; padding: 0.5rem;" />
    </div>

    <div style="margin-bottom: 1rem;">
        <label for="password">Password</label><br />
        <input id="password" type="password" @bind="_loginRequest.Password" placeholder="Enter password" style="width: 100%; padding: 0.5rem;" />
    </div>

    <div style="display: flex; gap: 1rem;">
        <button @onclick="LoginAsync" style="padding: 0.5rem 1rem;">Login</button>
        <button @onclick="GoToRegister" style="padding: 0.5rem 1rem;">Register</button>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p style="color: red; margin-top: 1rem;">@_errorMessage</p>
    }
</div>

@code {
    private LoginRequest _loginRequest = new();  // Strongly typed model
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task LoginAsync()
    {
        _errorMessage = string.Empty;

        var response = await UserApiClient.LoginAsync((_loginRequest));
        
        if (!response.Success)
        {
            _errorMessage = string.Join(", ", response.Error ?? new[] { "Login failed." });
            return;
        }
        
        var validateAuth = await AuthApiClient.ValidateTokenAsync(response.Data.User.UserId, response.Data.Token, UserOperation.Login);

        if (!validateAuth.Success)
        {
            _errorMessage = string.Join(", ", response.Error ?? new[] { "Token is not valid. Please try again." });
            return;
        }

        await TokenService.SaveTokenAsync(response.Data.Token);
        ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthStateChanged();
        NavManager.NavigateTo("/");
    }

    private void GoToRegister() => NavManager.NavigateTo("/register");
}
